// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend_apis.Data;

#nullable disable

namespace backend_apis.Migrations
{
    [DbContext(typeof(ProjectManagerDbContext))]
    [Migration("20240810165155_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("backend_apis.Models.Assignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("JoinAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastViewAt")
                        .HasColumnType("bigint");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("isPinned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("backend_apis.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("backend_apis.Models.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("backend_apis.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CommentAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("backend_apis.Models.HubConnection", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("HubConnections");
                });

            modelBuilder.Entity("backend_apis.Models.List", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WipLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("backend_apis.Models.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Agent")
                        .HasColumnType("int");

                    b.Property<string>("AgentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Scope")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("backend_apis.Models.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DueDate")
                        .HasColumnType("bigint");

                    b.Property<string>("ListOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WorkspaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("backend_apis.Models.ProjectComment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CommentAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectComments");
                });

            modelBuilder.Entity("backend_apis.Models.ProjectHubConnection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectHubConnections");
                });

            modelBuilder.Entity("backend_apis.Models.ProjectInvitation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("InvitedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("InvitedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InviterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Permission")
                        .HasColumnType("int");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InviterId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectInvitations");
                });

            modelBuilder.Entity("backend_apis.Models.ProjectRequest", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RequesterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("RequestedAt")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectId", "RequesterId");

                    b.HasIndex("RequesterId");

                    b.ToTable("ProjectRequest");
                });

            modelBuilder.Entity("backend_apis.Models.SubTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("AssignedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("CompletedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignerId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("backend_apis.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("DeleterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DueDate")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMarkedNeedHelp")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsReOpened")
                        .HasColumnType("bit");

                    b.Property<long?>("LastListUpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("ListId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<long?>("StartedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusChangeAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleterId");

                    b.HasIndex("ListId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("backend_apis.Models.TaskAssignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("AssignedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("AssignerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignerId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAssignments");
                });

            modelBuilder.Entity("backend_apis.Models.TaskDependenceDetail", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DependentTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TaskId", "DependentTaskId");

                    b.HasIndex("DependentTaskId");

                    b.ToTable("TaskDependenceDetails");
                });

            modelBuilder.Entity("backend_apis.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("JoinAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastNotificationView")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend_apis.Models.Workspace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("backend_apis.Models.Assignment", b =>
                {
                    b.HasOne("backend_apis.Models.Project", "Project")
                        .WithMany("Assignments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_apis.Models.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend_apis.Models.Attachment", b =>
                {
                    b.HasOne("backend_apis.Models.Assignment", "Assignment")
                        .WithMany("Attachments")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("backend_apis.Models.Task", "Task")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("backend_apis.Models.ChangeLog", b =>
                {
                    b.HasOne("backend_apis.Models.Assignment", "Assignment")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("backend_apis.Models.Project", "Project")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("backend_apis.Models.Comment", b =>
                {
                    b.HasOne("backend_apis.Models.Assignment", "Assignment")
                        .WithMany("Comments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_apis.Models.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("backend_apis.Models.List", b =>
                {
                    b.HasOne("backend_apis.Models.Project", "Project")
                        .WithMany("Lists")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("backend_apis.Models.Notification", b =>
                {
                    b.HasOne("backend_apis.Models.Project", "Project")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("backend_apis.Models.Project", b =>
                {
                    b.HasOne("backend_apis.Models.Workspace", "Workspace")
                        .WithMany("Projects")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("backend_apis.Models.ProjectComment", b =>
                {
                    b.HasOne("backend_apis.Models.Assignment", "Assignment")
                        .WithMany("ProjectComments")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("backend_apis.Models.Project", "Project")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("backend_apis.Models.ProjectInvitation", b =>
                {
                    b.HasOne("backend_apis.Models.Assignment", "Inviter")
                        .WithMany("ProjectInvitations")
                        .HasForeignKey("InviterId");

                    b.HasOne("backend_apis.Models.Project", "Project")
                        .WithMany("ProjectInvitations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inviter");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("backend_apis.Models.ProjectRequest", b =>
                {
                    b.HasOne("backend_apis.Models.Project", "Project")
                        .WithMany("Requests")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend_apis.Models.User", "Requester")
                        .WithMany("Requests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("backend_apis.Models.SubTask", b =>
                {
                    b.HasOne("backend_apis.Models.Assignment", "Assigner")
                        .WithMany("AssignSubtasks")
                        .HasForeignKey("AssignerId");

                    b.HasOne("backend_apis.Models.Assignment", "Assignment")
                        .WithMany("SubTasks")
                        .HasForeignKey("AssignmentId");

                    b.HasOne("backend_apis.Models.Task", "Task")
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assigner");

                    b.Navigation("Assignment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("backend_apis.Models.Task", b =>
                {
                    b.HasOne("backend_apis.Models.Assignment", "Creator")
                        .WithMany("CreateTasks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_apis.Models.Assignment", "Deleter")
                        .WithMany("DeleteTasks")
                        .HasForeignKey("DeleterId");

                    b.HasOne("backend_apis.Models.List", "List")
                        .WithMany("Tasks")
                        .HasForeignKey("ListId");

                    b.Navigation("Creator");

                    b.Navigation("Deleter");

                    b.Navigation("List");
                });

            modelBuilder.Entity("backend_apis.Models.TaskAssignment", b =>
                {
                    b.HasOne("backend_apis.Models.Assignment", "Assigner")
                        .WithMany("TaskAssigners")
                        .HasForeignKey("AssignerId");

                    b.HasOne("backend_apis.Models.Assignment", "Assignment")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend_apis.Models.Task", "Task")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Assigner");

                    b.Navigation("Assignment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("backend_apis.Models.TaskDependenceDetail", b =>
                {
                    b.HasOne("backend_apis.Models.Task", "DependentTask")
                        .WithMany("ChildDependentTasks")
                        .HasForeignKey("DependentTaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("backend_apis.Models.Task", "Task")
                        .WithMany("ParentDependentTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependentTask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("backend_apis.Models.Workspace", b =>
                {
                    b.HasOne("backend_apis.Models.User", "Owner")
                        .WithMany("Workspaces")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("backend_apis.Models.Assignment", b =>
                {
                    b.Navigation("AssignSubtasks");

                    b.Navigation("Attachments");

                    b.Navigation("ChangeLogs");

                    b.Navigation("Comments");

                    b.Navigation("CreateTasks");

                    b.Navigation("DeleteTasks");

                    b.Navigation("ProjectComments");

                    b.Navigation("ProjectInvitations");

                    b.Navigation("SubTasks");

                    b.Navigation("TaskAssigners");

                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("backend_apis.Models.List", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("backend_apis.Models.Project", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("ChangeLogs");

                    b.Navigation("Comments");

                    b.Navigation("Lists");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectInvitations");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("backend_apis.Models.Task", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ChildDependentTasks");

                    b.Navigation("Comments");

                    b.Navigation("ParentDependentTasks");

                    b.Navigation("SubTasks");

                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("backend_apis.Models.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Requests");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("backend_apis.Models.Workspace", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
